syntax = "proto3";

package goproxy;
option java_package = "net.conradwood.apis.goproxy";
import "golang.conradwood.net/apis/common/common.proto";
import "golang.conradwood.net/apis/h2gproxy/h2gproxy.proto";
message Config {
  repeated string LocalHosts=1; // hosts being served locally
  repeated ArtefactDef ArtefactResolvers=2;
  string GoGetProxy=3; // URL of  go-get-proxy from https://github.com/goproxy/goproxy, e.g. http://192.168.0.1:1234
  repeated UpStreamProxy GoProxies=4; // packages to retrieve from an upstream proxy
}
message UpStreamProxy {
  string Matcher=1; // a go regex, e.g. .*github.*
  string Proxy=2; // e.g.https://proxy.golang.org
  string Username=3; // optional
  string Password=4; // optional
}
message ArtefactDef {
  string Path=1; // path to match on
  uint64 ArtefactID=2; // artefact to serve
  string Domain=3;
  string Name=4;
}
message CachedModule {
  uint64 ID=1;
  string Path=2;
  string Version=3;
  string Suffix=4;
  string Key=5;
  uint32 Created=6;
  uint32 LastUsed=7;
  bool ToBeDeleted=8;
}

message ModuleInfoRequest {
  string URL=1;
}
enum MODULETYPE {
  UNKNOWN=0; // unparseable
  PROTO=2;
  ARTEFACT=3;
  EXTERNALMODULE=4;
  UPSTREAMPROXY=5;
}

message ModuleInfo {
  MODULETYPE ModuleType=1;
  bool Exists=2; // if false, then module has been parsed, it's type determined, but it doesn't exist
}
message VersionInfo {
  uint64 Version=1;
  uint32 BuildTime=2;
  string VersionName=3; // sometimes version annoyingly is just a string
}
message GetPathRequest {
  string Path=1;
}
message BinData {
  bytes Data=1;
}
/*
 goproxy acts as a gomodule proxy.
 it serves three different module types:
 1. Protos (from protorenderer)
 2. Modules from local build
 3. Modules from external builds (e.g. github)
*/
service GoProxy {
  // h2gproxy endpoint
  rpc StreamHTTP(h2gproxy.StreamRequest) returns (stream h2gproxy.StreamDataResponse);
  rpc AnalyseURL(ModuleInfoRequest) returns (ModuleInfo);
  // given a path, will download response
  rpc GetPath(GetPathRequest) returns (stream BinData);
}

// empty service, runs regular test and exposes metric
service GoProxyTestRunner {
}
